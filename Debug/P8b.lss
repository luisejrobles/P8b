
P8b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800200  00800200  0000027c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3d  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb1  00000000  00000000  00001189  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ea  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b5  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000236  00000000  00000000  000028f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002b27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	6e c0       	rjmp	.+220    	; 0x142 <__vector_25>
  66:	00 00       	nop
  68:	96 c0       	rjmp	.+300    	; 0x196 <__vector_26>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 38       	cpi	r26, 0x84	; 132
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	02 d0       	rcall	.+4      	; 0x10a <main>
 106:	7e c0       	rjmp	.+252    	; 0x204 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <main>:
	if( !(BUFFER_FULL(transmision)))
	{
		return 1;
	}
	return 0;
}
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	c4 58       	subi	r28, 0x84	; 132
 114:	d1 09       	sbc	r29, r1
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	f8 94       	cli
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	cd bf       	out	0x3d, r28	; 61
 120:	22 96       	adiw	r28, 0x02	; 2
 122:	1f ae       	std	Y+63, r1	; 0x3f
 124:	22 97       	sbiw	r28, 0x02	; 2
 126:	23 96       	adiw	r28, 0x03	; 3
 128:	1f ae       	std	Y+63, r1	; 0x3f
 12a:	23 97       	sbiw	r28, 0x03	; 3
 12c:	cd 57       	subi	r28, 0x7D	; 125
 12e:	df 4f       	sbci	r29, 0xFF	; 255
 130:	18 82       	st	Y, r1
 132:	c3 58       	subi	r28, 0x83	; 131
 134:	d0 40       	sbci	r29, 0x00	; 0
 136:	cc 57       	subi	r28, 0x7C	; 124
 138:	df 4f       	sbci	r29, 0xFF	; 255
 13a:	18 82       	st	Y, r1
 13c:	c4 58       	subi	r28, 0x84	; 132
 13e:	d0 40       	sbci	r29, 0x00	; 0
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0x36>

00000142 <__vector_25>:
ISR(USART0_RX_vect)	//Rx interrupt
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	0b b6       	in	r0, 0x3b	; 59
 14e:	0f 92       	push	r0
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	recepcion.buffer[recepcion.in_idx] = UDR0;
 15c:	a0 e4       	ldi	r26, 0x40	; 64
 15e:	b2 e0       	ldi	r27, 0x02	; 2
 160:	ec 91       	ld	r30, X
 162:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	e0 50       	subi	r30, 0x00	; 0
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	80 83       	st	Z, r24
	recepcion.out_idx = MOD(recepcion.in_idx++);
 16e:	8c 91       	ld	r24, X
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	98 0f       	add	r25, r24
 174:	9c 93       	st	X, r25
 176:	8f 73       	andi	r24, 0x3F	; 63
 178:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <_edata+0x41>
	//UCSR0B =	
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0b be       	out	0x3b, r0	; 59
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_26>:
ISR(USART0_UDRE_vect)	//tx interrupt
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	0b b6       	in	r0, 0x3b	; 59
 1a2:	0f 92       	push	r0
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	UDR0 = transmision.buffer[transmision.out_idx];
 1b0:	a3 e8       	ldi	r26, 0x83	; 131
 1b2:	b2 e0       	ldi	r27, 0x02	; 2
 1b4:	ec 91       	ld	r30, X
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ee 5b       	subi	r30, 0xBE	; 190
 1ba:	fd 4f       	sbci	r31, 0xFD	; 253
 1bc:	80 81       	ld	r24, Z
 1be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	transmision.out_idx = MOD(transmision.out_idx++);
 1c2:	8c 91       	ld	r24, X
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	98 0f       	add	r25, r24
 1c8:	9c 93       	st	X, r25
 1ca:	8f 73       	andi	r24, 0x3F	; 63
 1cc:	8c 93       	st	X, r24
	while(!(UCSR0A &(1<<UDRE0)))
 1ce:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 1d2:	85 fd       	sbrc	r24, 5
 1d4:	0a c0       	rjmp	.+20     	; 0x1ea <__vector_26+0x54>
	{
		UCSR0B &= 216<<TXB80;
 1d6:	e1 ec       	ldi	r30, 0xC1	; 193
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
}
ISR(USART0_UDRE_vect)	//tx interrupt
{
	UDR0 = transmision.buffer[transmision.out_idx];
	transmision.out_idx = MOD(transmision.out_idx++);
	while(!(UCSR0A &(1<<UDRE0)))
 1da:	a0 ec       	ldi	r26, 0xC0	; 192
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
	{
		UCSR0B &= 216<<TXB80;
 1de:	80 81       	ld	r24, Z
 1e0:	88 7d       	andi	r24, 0xD8	; 216
 1e2:	80 83       	st	Z, r24
}
ISR(USART0_UDRE_vect)	//tx interrupt
{
	UDR0 = transmision.buffer[transmision.out_idx];
	transmision.out_idx = MOD(transmision.out_idx++);
	while(!(UCSR0A &(1<<UDRE0)))
 1e4:	8c 91       	ld	r24, X
 1e6:	85 ff       	sbrs	r24, 5
 1e8:	fa cf       	rjmp	.-12     	; 0x1de <__vector_26+0x48>
	{
		UCSR0B &= 216<<TXB80;
	}
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0b be       	out	0x3b, r0	; 59
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
