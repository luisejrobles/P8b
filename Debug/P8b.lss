
P8b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  000005f2  00000686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800228  00800228  000006ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010dd  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0e  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e7  00000000  00000000  00002583  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ec  00000000  00000000  00002cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000700  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000039dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	9a c0       	rjmp	.+308    	; 0x19a <__vector_25>
  66:	00 00       	nop
  68:	df c0       	rjmp	.+446    	; 0x228 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ef       	ldi	r30, 0xF2	; 242
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 32       	cpi	r26, 0x28	; 40
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e2       	ldi	r26, 0x28	; 40
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 3a       	cpi	r26, 0xAC	; 172
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	24 d2       	rcall	.+1096   	; 0x568 <main>
 120:	66 c2       	rjmp	.+1228   	; 0x5ee <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <UART0_getchar>:
	if(!BUFFER_FULL(recepcion))
	{
		return 1;	//si no está lleno
	}
	return 0;	//lleno
}
 124:	e8 e6       	ldi	r30, 0x68	; 104
 126:	f2 e0       	ldi	r31, 0x02	; 2
 128:	a9 e6       	ldi	r26, 0x69	; 105
 12a:	b2 e0       	ldi	r27, 0x02	; 2
 12c:	20 81       	ld	r18, Z
 12e:	2f 73       	andi	r18, 0x3F	; 63
 130:	80 81       	ld	r24, Z
 132:	98 2f       	mov	r25, r24
 134:	92 95       	swap	r25
 136:	96 95       	lsr	r25
 138:	96 95       	lsr	r25
 13a:	93 70       	andi	r25, 0x03	; 3
 13c:	8c 91       	ld	r24, X
 13e:	8f 70       	andi	r24, 0x0F	; 15
 140:	88 0f       	add	r24, r24
 142:	88 0f       	add	r24, r24
 144:	89 2b       	or	r24, r25
 146:	28 17       	cp	r18, r24
 148:	89 f3       	breq	.-30     	; 0x12c <UART0_getchar+0x8>
 14a:	a8 e6       	ldi	r26, 0x68	; 104
 14c:	b2 e0       	ldi	r27, 0x02	; 2
 14e:	ec 91       	ld	r30, X
 150:	8e 2f       	mov	r24, r30
 152:	82 95       	swap	r24
 154:	86 95       	lsr	r24
 156:	86 95       	lsr	r24
 158:	83 70       	andi	r24, 0x03	; 3
 15a:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <__data_end+0x41>
 15e:	ef 70       	andi	r30, 0x0F	; 15
 160:	ee 0f       	add	r30, r30
 162:	ee 0f       	add	r30, r30
 164:	e8 2b       	or	r30, r24
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	8e 0f       	add	r24, r30
 16a:	8f 73       	andi	r24, 0x3F	; 63
 16c:	28 2f       	mov	r18, r24
 16e:	22 95       	swap	r18
 170:	22 0f       	add	r18, r18
 172:	22 0f       	add	r18, r18
 174:	20 7c       	andi	r18, 0xC0	; 192
 176:	9c 91       	ld	r25, X
 178:	9f 73       	andi	r25, 0x3F	; 63
 17a:	92 2b       	or	r25, r18
 17c:	9c 93       	st	X, r25
 17e:	86 95       	lsr	r24
 180:	86 95       	lsr	r24
 182:	11 96       	adiw	r26, 0x01	; 1
 184:	9c 91       	ld	r25, X
 186:	11 97       	sbiw	r26, 0x01	; 1
 188:	90 7f       	andi	r25, 0xF0	; 240
 18a:	89 2b       	or	r24, r25
 18c:	11 96       	adiw	r26, 0x01	; 1
 18e:	8c 93       	st	X, r24
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	e8 5d       	subi	r30, 0xD8	; 216
 194:	fd 4f       	sbci	r31, 0xFD	; 253
 196:	80 81       	ld	r24, Z
 198:	08 95       	ret

0000019a <__vector_25>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
 1b8:	e8 e6       	ldi	r30, 0x68	; 104
 1ba:	f2 e0       	ldi	r31, 0x02	; 2
 1bc:	a9 e6       	ldi	r26, 0x69	; 105
 1be:	b2 e0       	ldi	r27, 0x02	; 2
 1c0:	20 81       	ld	r18, Z
 1c2:	2f 73       	andi	r18, 0x3F	; 63
 1c4:	80 81       	ld	r24, Z
 1c6:	98 2f       	mov	r25, r24
 1c8:	92 95       	swap	r25
 1ca:	96 95       	lsr	r25
 1cc:	96 95       	lsr	r25
 1ce:	93 70       	andi	r25, 0x03	; 3
 1d0:	8c 91       	ld	r24, X
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	88 0f       	add	r24, r24
 1d6:	88 0f       	add	r24, r24
 1d8:	89 2b       	or	r24, r25
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	28 17       	cp	r18, r24
 1e2:	39 07       	cpc	r19, r25
 1e4:	69 f3       	breq	.-38     	; 0x1c0 <__vector_25+0x26>
 1e6:	a8 e6       	ldi	r26, 0x68	; 104
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	ec 91       	ld	r30, X
 1ec:	ef 73       	andi	r30, 0x3F	; 63
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	8e 0f       	add	r24, r30
 1f2:	98 2f       	mov	r25, r24
 1f4:	9f 73       	andi	r25, 0x3F	; 63
 1f6:	8c 91       	ld	r24, X
 1f8:	80 7c       	andi	r24, 0xC0	; 192
 1fa:	89 2b       	or	r24, r25
 1fc:	8c 93       	st	X, r24
 1fe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	e8 5d       	subi	r30, 0xD8	; 216
 206:	fd 4f       	sbci	r31, 0xFD	; 253
 208:	80 83       	st	Z, r24
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0b be       	out	0x3b, r0	; 59
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_26>:
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	0b b6       	in	r0, 0x3b	; 59
 234:	0f 92       	push	r0
 236:	2f 93       	push	r18
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
 244:	ea ea       	ldi	r30, 0xAA	; 170
 246:	f2 e0       	ldi	r31, 0x02	; 2
 248:	20 81       	ld	r18, Z
 24a:	2f 73       	andi	r18, 0x3F	; 63
 24c:	80 81       	ld	r24, Z
 24e:	98 2f       	mov	r25, r24
 250:	92 95       	swap	r25
 252:	96 95       	lsr	r25
 254:	96 95       	lsr	r25
 256:	93 70       	andi	r25, 0x03	; 3
 258:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <transmision+0x41>
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	88 0f       	add	r24, r24
 260:	88 0f       	add	r24, r24
 262:	89 2b       	or	r24, r25
 264:	28 13       	cpse	r18, r24
 266:	06 c0       	rjmp	.+12     	; 0x274 <__vector_26+0x4c>
 268:	e1 ec       	ldi	r30, 0xC1	; 193
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	8f 7d       	andi	r24, 0xDF	; 223
 270:	80 83       	st	Z, r24
 272:	29 c0       	rjmp	.+82     	; 0x2c6 <__vector_26+0x9e>
 274:	aa ea       	ldi	r26, 0xAA	; 170
 276:	b2 e0       	ldi	r27, 0x02	; 2
 278:	ec 91       	ld	r30, X
 27a:	8e 2f       	mov	r24, r30
 27c:	82 95       	swap	r24
 27e:	86 95       	lsr	r24
 280:	86 95       	lsr	r24
 282:	83 70       	andi	r24, 0x03	; 3
 284:	e0 91 ab 02 	lds	r30, 0x02AB	; 0x8002ab <transmision+0x41>
 288:	ef 70       	andi	r30, 0x0F	; 15
 28a:	ee 0f       	add	r30, r30
 28c:	ee 0f       	add	r30, r30
 28e:	e8 2b       	or	r30, r24
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	8e 0f       	add	r24, r30
 294:	8f 73       	andi	r24, 0x3F	; 63
 296:	28 2f       	mov	r18, r24
 298:	22 95       	swap	r18
 29a:	22 0f       	add	r18, r18
 29c:	22 0f       	add	r18, r18
 29e:	20 7c       	andi	r18, 0xC0	; 192
 2a0:	9c 91       	ld	r25, X
 2a2:	9f 73       	andi	r25, 0x3F	; 63
 2a4:	92 2b       	or	r25, r18
 2a6:	9c 93       	st	X, r25
 2a8:	86 95       	lsr	r24
 2aa:	86 95       	lsr	r24
 2ac:	11 96       	adiw	r26, 0x01	; 1
 2ae:	9c 91       	ld	r25, X
 2b0:	11 97       	sbiw	r26, 0x01	; 1
 2b2:	90 7f       	andi	r25, 0xF0	; 240
 2b4:	89 2b       	or	r24, r25
 2b6:	11 96       	adiw	r26, 0x01	; 1
 2b8:	8c 93       	st	X, r24
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e6 59       	subi	r30, 0x96	; 150
 2be:	fd 4f       	sbci	r31, 0xFD	; 253
 2c0:	80 81       	ld	r24, Z
 2c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	2f 91       	pop	r18
 2d4:	0f 90       	pop	r0
 2d6:	0b be       	out	0x3b, r0	; 59
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <atoi>:
unsigned int atoi(char *str)
{
	unsigned int num = 0, exp = 1, val, count = 0;
	//contando digitos en la cadena============
	while(*str)
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 81       	ld	r18, Z
 2e6:	22 23       	and	r18, r18
 2e8:	a9 f1       	breq	.+106    	; 0x354 <atoi+0x72>
 2ea:	31 96       	adiw	r30, 0x01	; 1
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <atoi+0x12>
 2f2:	f9 01       	movw	r30, r18
	{
		str++;
		count++;
 2f4:	4f 5f       	subi	r20, 0xFF	; 255
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	9f 01       	movw	r18, r30
 2fa:	2f 5f       	subi	r18, 0xFF	; 255
 2fc:	3f 4f       	sbci	r19, 0xFF	; 255
}
unsigned int atoi(char *str)
{
	unsigned int num = 0, exp = 1, val, count = 0;
	//contando digitos en la cadena============
	while(*str)
 2fe:	80 81       	ld	r24, Z
 300:	81 11       	cpse	r24, r1
 302:	f7 cf       	rjmp	.-18     	; 0x2f2 <atoi+0x10>
	{
		str++;
		count++;
	}
	str--;	//no tomando en cuenta '\0'
	while(count != 0 )
 304:	41 15       	cp	r20, r1
 306:	51 05       	cpc	r21, r1
 308:	41 f1       	breq	.+80     	; 0x35a <atoi+0x78>
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
	{
		val = *str--;	//tomando el valor
 312:	22 91       	ld	r18, -Z
 314:	30 e0       	ldi	r19, 0x00	; 0
		val = val - '0';	//obteniendo valor crudo
 316:	20 53       	subi	r18, 0x30	; 48
 318:	31 09       	sbc	r19, r1
		if(val >=0 && val <=9)
 31a:	2a 30       	cpi	r18, 0x0A	; 10
 31c:	31 05       	cpc	r19, r1
 31e:	b0 f4       	brcc	.+44     	; 0x34c <atoi+0x6a>
		{
			num = num + (val * exp);	//almacenando valor crudo*exp en num
 320:	26 9f       	mul	r18, r22
 322:	d0 01       	movw	r26, r0
 324:	27 9f       	mul	r18, r23
 326:	b0 0d       	add	r27, r0
 328:	36 9f       	mul	r19, r22
 32a:	b0 0d       	add	r27, r0
 32c:	11 24       	eor	r1, r1
 32e:	8a 0f       	add	r24, r26
 330:	9b 1f       	adc	r25, r27
			exp = exp*10;
 332:	9b 01       	movw	r18, r22
 334:	22 0f       	add	r18, r18
 336:	33 1f       	adc	r19, r19
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	62 0f       	add	r22, r18
 346:	73 1f       	adc	r23, r19
			count--;
 348:	41 50       	subi	r20, 0x01	; 1
 34a:	51 09       	sbc	r21, r1
	{
		str++;
		count++;
	}
	str--;	//no tomando en cuenta '\0'
	while(count != 0 )
 34c:	41 15       	cp	r20, r1
 34e:	51 05       	cpc	r21, r1
 350:	01 f7       	brne	.-64     	; 0x312 <atoi+0x30>
 352:	08 95       	ret
	}
	return 0;	//lleno
}
unsigned int atoi(char *str)
{
	unsigned int num = 0, exp = 1, val, count = 0;
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
			exp = exp*10;
			count--;
		}
	}
	return num;
}
 35e:	08 95       	ret

00000360 <BUFFER_INIT>:
void BUFFER_INIT(void)	//Inicializando los buffers
{
	recepcion.in_idx = 0;
 360:	e8 e6       	ldi	r30, 0x68	; 104
 362:	f2 e0       	ldi	r31, 0x02	; 2
 364:	80 81       	ld	r24, Z
 366:	80 7c       	andi	r24, 0xC0	; 192
 368:	80 83       	st	Z, r24
	recepcion.out_idx = 0;
 36a:	80 81       	ld	r24, Z
 36c:	8f 73       	andi	r24, 0x3F	; 63
 36e:	80 83       	st	Z, r24
 370:	81 81       	ldd	r24, Z+1	; 0x01
 372:	80 7f       	andi	r24, 0xF0	; 240
 374:	81 83       	std	Z+1, r24	; 0x01
	transmision.in_idx = 0;
 376:	ea ea       	ldi	r30, 0xAA	; 170
 378:	f2 e0       	ldi	r31, 0x02	; 2
 37a:	80 81       	ld	r24, Z
 37c:	80 7c       	andi	r24, 0xC0	; 192
 37e:	80 83       	st	Z, r24
	transmision.out_idx = 0;
 380:	80 81       	ld	r24, Z
 382:	8f 73       	andi	r24, 0x3F	; 63
 384:	80 83       	st	Z, r24
 386:	81 81       	ldd	r24, Z+1	; 0x01
 388:	80 7f       	andi	r24, 0xF0	; 240
 38a:	81 83       	std	Z+1, r24	; 0x01
 38c:	08 95       	ret

0000038e <itoa>:
}
void itoa(char *str, uint16_t number, uint8_t base)
{
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	fc 01       	movw	r30, r24
 398:	9b 01       	movw	r18, r22
	unsigned int cociente, residuo,count = 0, i=0, j;
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	cociente = number;
	do{
		residuo = cociente%base;
 39e:	04 2f       	mov	r16, r20
 3a0:	10 e0       	ldi	r17, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <itoa+0x1a>
			}else{
			c = residuo + '0'; //agregar el respectivo para crear el caracter de numero
		}

		*str++ = c;
		count++;
 3a4:	ec 01       	movw	r28, r24
			c = residuo + 55;
			}else{
			c = residuo + '0'; //agregar el respectivo para crear el caracter de numero
		}

		*str++ = c;
 3a6:	fd 01       	movw	r30, r26
{
	unsigned int cociente, residuo,count = 0, i=0, j;
	char c;
	cociente = number;
	do{
		residuo = cociente%base;
 3a8:	c9 01       	movw	r24, r18
 3aa:	b8 01       	movw	r22, r16
 3ac:	0c d1       	rcall	.+536    	; 0x5c6 <__udivmodhi4>
		cociente = cociente/base;
 3ae:	26 2f       	mov	r18, r22
 3b0:	37 2f       	mov	r19, r23
		if(residuo > 9)	//si es mayor a 9, agregar el respectivo para imprimir letra.
 3b2:	8a 30       	cpi	r24, 0x0A	; 10
 3b4:	91 05       	cpc	r25, r1
 3b6:	10 f0       	brcs	.+4      	; 0x3bc <itoa+0x2e>
		{
			c = residuo + 55;
 3b8:	89 5c       	subi	r24, 0xC9	; 201
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <itoa+0x30>
			}else{
			c = residuo + '0'; //agregar el respectivo para crear el caracter de numero
 3bc:	80 5d       	subi	r24, 0xD0	; 208
		}

		*str++ = c;
 3be:	df 01       	movw	r26, r30
 3c0:	11 96       	adiw	r26, 0x01	; 1
 3c2:	80 83       	st	Z, r24
		count++;
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
	}while( cociente != 0 );
 3c8:	21 15       	cp	r18, r1
 3ca:	31 05       	cpc	r19, r1
 3cc:	59 f7       	brne	.-42     	; 0x3a4 <itoa+0x16>
	*str= '\0';
 3ce:	11 82       	std	Z+1, r1	; 0x01
	str -=count;
 3d0:	a8 1b       	sub	r26, r24
 3d2:	b9 0b       	sbc	r27, r25
	j = count -1;
	//==============invertir cadena==================
	while(i < j)
 3d4:	20 97       	sbiw	r28, 0x00	; 0
 3d6:	99 f0       	breq	.+38     	; 0x3fe <itoa+0x70>
 3d8:	fd 01       	movw	r30, r26
 3da:	a8 0f       	add	r26, r24
 3dc:	b9 1f       	adc	r27, r25
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
	{
		if( *(str+i) != *(str+j))
 3e2:	20 81       	ld	r18, Z
 3e4:	3e 91       	ld	r19, -X
 3e6:	23 17       	cp	r18, r19
 3e8:	11 f0       	breq	.+4      	; 0x3ee <itoa+0x60>
		{
			c = *(str+i);
			*(str+i) = *(str+j);
 3ea:	30 83       	st	Z, r19
			*(str+j) = c;
 3ec:	2c 93       	st	X, r18
		}
		i++;
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	31 96       	adiw	r30, 0x01	; 1
	}while( cociente != 0 );
	*str= '\0';
	str -=count;
	j = count -1;
	//==============invertir cadena==================
	while(i < j)
 3f2:	9e 01       	movw	r18, r28
 3f4:	28 1b       	sub	r18, r24
 3f6:	39 0b       	sbc	r19, r25
 3f8:	82 17       	cp	r24, r18
 3fa:	93 07       	cpc	r25, r19
 3fc:	90 f3       	brcs	.-28     	; 0x3e2 <itoa+0x54>
			*(str+j) = c;
		}
		i++;
		j--;
	}
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	08 95       	ret

00000408 <UART0_Ini>:
void UART0_Ini(uint16_t mode)
{
		/*Función para inicializar el puerto serie del ATmega1280/2560 
	  Si mode es 0    9600,8,N,1
	  Si mode es 1    19200,8,N,1 */
	UCSR0A = (1<<U2X0);		//Usart double speed
 408:	22 e0       	ldi	r18, 0x02	; 2
 40a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0B = ((1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0))&(~(1<<UCSZ02)); // Reception enable | Transmission enable | 9bit disable| RX interruption enable
 40e:	28 e9       	ldi	r18, 0x98	; 152
 410:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);	//8bit enable
 414:	26 e0       	ldi	r18, 0x06	; 6
 416:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	if(!mode)
 41a:	89 2b       	or	r24, r25
 41c:	39 f4       	brne	.+14     	; 0x42c <UART0_Ini+0x24>
	{
		UBRR0 = 207;	//9600 baud rate UBRR
 41e:	8f ec       	ldi	r24, 0xCF	; 207
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 426:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 42a:	06 c0       	rjmp	.+12     	; 0x438 <UART0_Ini+0x30>
	}else if(mode)
	{
		UBRR0 = 103;	//19.2k baud rate UBRR
 42c:	87 e6       	ldi	r24, 0x67	; 103
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 434:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	}
	sei();	//Interupciones globales
	BUFFER_INIT();
 438:	78 94       	sei
 43a:	92 cf       	rjmp	.-220    	; 0x360 <BUFFER_INIT>
 43c:	08 95       	ret

0000043e <UART0_putchar>:
	}while(c != 13);
	*str = '\0';
}
void UART0_putchar(char data)
{
	while(BUFFER_FULL(transmision));				//loop mientras el buffer esté lleno
 43e:	ea ea       	ldi	r30, 0xAA	; 170
 440:	f2 e0       	ldi	r31, 0x02	; 2
 442:	ab ea       	ldi	r26, 0xAB	; 171
 444:	b2 e0       	ldi	r27, 0x02	; 2
 446:	40 81       	ld	r20, Z
 448:	4f 73       	andi	r20, 0x3F	; 63
 44a:	20 81       	ld	r18, Z
 44c:	92 2f       	mov	r25, r18
 44e:	92 95       	swap	r25
 450:	96 95       	lsr	r25
 452:	96 95       	lsr	r25
 454:	93 70       	andi	r25, 0x03	; 3
 456:	2c 91       	ld	r18, X
 458:	2f 70       	andi	r18, 0x0F	; 15
 45a:	22 0f       	add	r18, r18
 45c:	22 0f       	add	r18, r18
 45e:	29 2b       	or	r18, r25
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	21 50       	subi	r18, 0x01	; 1
 466:	31 09       	sbc	r19, r1
 468:	42 17       	cp	r20, r18
 46a:	53 07       	cpc	r21, r19
 46c:	61 f3       	breq	.-40     	; 0x446 <UART0_putchar+0x8>
	
	if(BUFFER_EMPTY(transmision))					//si buffer está vacío
 46e:	ea ea       	ldi	r30, 0xAA	; 170
 470:	f2 e0       	ldi	r31, 0x02	; 2
 472:	30 81       	ld	r19, Z
 474:	3f 73       	andi	r19, 0x3F	; 63
 476:	90 81       	ld	r25, Z
 478:	29 2f       	mov	r18, r25
 47a:	22 95       	swap	r18
 47c:	26 95       	lsr	r18
 47e:	26 95       	lsr	r18
 480:	23 70       	andi	r18, 0x03	; 3
 482:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <transmision+0x41>
 486:	9f 70       	andi	r25, 0x0F	; 15
 488:	99 0f       	add	r25, r25
 48a:	99 0f       	add	r25, r25
 48c:	92 2b       	or	r25, r18
 48e:	39 13       	cpse	r19, r25
 490:	15 c0       	rjmp	.+42     	; 0x4bc <UART0_putchar+0x7e>
	{
		transmision.buffer[transmision.in_idx++] = data;  //ingreso dato al buffer para que lo capte la interrupcion
 492:	df 01       	movw	r26, r30
 494:	e0 81       	ld	r30, Z
 496:	ef 73       	andi	r30, 0x3F	; 63
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	9e 0f       	add	r25, r30
 49c:	29 2f       	mov	r18, r25
 49e:	2f 73       	andi	r18, 0x3F	; 63
 4a0:	9c 91       	ld	r25, X
 4a2:	90 7c       	andi	r25, 0xC0	; 192
 4a4:	92 2b       	or	r25, r18
 4a6:	9c 93       	st	X, r25
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	e6 59       	subi	r30, 0x96	; 150
 4ac:	fd 4f       	sbci	r31, 0xFD	; 253
 4ae:	80 83       	st	Z, r24
		UCSR0B |= (1<<UDRIE0);				//Tx interrupt enable
 4b0:	e1 ec       	ldi	r30, 0xC1	; 193
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	80 62       	ori	r24, 0x20	; 32
 4b8:	80 83       	st	Z, r24
 4ba:	08 95       	ret
	}
	else
	{
		transmision.buffer[transmision.in_idx++] = data;  /*ingresa el dato en la cabeza y aumenta*/
 4bc:	aa ea       	ldi	r26, 0xAA	; 170
 4be:	b2 e0       	ldi	r27, 0x02	; 2
 4c0:	ec 91       	ld	r30, X
 4c2:	ef 73       	andi	r30, 0x3F	; 63
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	9e 0f       	add	r25, r30
 4c8:	29 2f       	mov	r18, r25
 4ca:	2f 73       	andi	r18, 0x3F	; 63
 4cc:	9c 91       	ld	r25, X
 4ce:	90 7c       	andi	r25, 0xC0	; 192
 4d0:	92 2b       	or	r25, r18
 4d2:	9c 93       	st	X, r25
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	e6 59       	subi	r30, 0x96	; 150
 4d8:	fd 4f       	sbci	r31, 0xFD	; 253
 4da:	80 83       	st	Z, r24
 4dc:	08 95       	ret

000004de <UART0_gets>:
	}
	sei();	//Interupciones globales
	BUFFER_INIT();
}
void UART0_gets(char *str)
{
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	7c 01       	movw	r14, r24
	unsigned char c;
	unsigned int i=0;
 4ea:	00 e0       	ldi	r16, 0x00	; 0
	do{
		c = UART0_getchar();
 4ec:	10 e0       	ldi	r17, 0x00	; 0
 4ee:	1a de       	rcall	.-972    	; 0x124 <UART0_getchar>
		if( (i<=18)&&(c!=8)&&(c!=13) )	//validacion menor al fin del arreglo, backspace y enter
 4f0:	c8 2f       	mov	r28, r24
 4f2:	03 31       	cpi	r16, 0x13	; 19
 4f4:	11 05       	cpc	r17, r1
 4f6:	68 f4       	brcc	.+26     	; 0x512 <UART0_gets+0x34>
 4f8:	88 30       	cpi	r24, 0x08	; 8
 4fa:	69 f0       	breq	.+26     	; 0x516 <UART0_gets+0x38>
		{
			UART0_putchar(c);
 4fc:	8d 30       	cpi	r24, 0x0D	; 13
 4fe:	f1 f0       	breq	.+60     	; 0x53c <UART0_gets+0x5e>
			*str++ = c;
 500:	9e df       	rcall	.-196    	; 0x43e <UART0_putchar>
 502:	f7 01       	movw	r30, r14
			i++;
 504:	c0 83       	st	Z, r28
 506:	0f 5f       	subi	r16, 0xFF	; 255
	do{
		c = UART0_getchar();
		if( (i<=18)&&(c!=8)&&(c!=13) )	//validacion menor al fin del arreglo, backspace y enter
		{
			UART0_putchar(c);
			*str++ = c;
 508:	1f 4f       	sbci	r17, 0xFF	; 255
 50a:	c7 01       	movw	r24, r14
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	7c 01       	movw	r14, r24
			i++;
		}
		if( (c==8) && (i>0) )		//validacion backspace
 510:	ee cf       	rjmp	.-36     	; 0x4ee <UART0_gets+0x10>
 512:	88 30       	cpi	r24, 0x08	; 8
 514:	89 f4       	brne	.+34     	; 0x538 <UART0_gets+0x5a>
 516:	01 15       	cp	r16, r1
		{
			UART0_putchar('\b');
 518:	11 05       	cpc	r17, r1
			UART0_putchar(' ');
 51a:	49 f3       	breq	.-46     	; 0x4ee <UART0_gets+0x10>
 51c:	88 e0       	ldi	r24, 0x08	; 8
			UART0_putchar(8);
 51e:	8f df       	rcall	.-226    	; 0x43e <UART0_putchar>
 520:	80 e2       	ldi	r24, 0x20	; 32
 522:	8d df       	rcall	.-230    	; 0x43e <UART0_putchar>
			*str--='\0';
 524:	88 e0       	ldi	r24, 0x08	; 8
 526:	8b df       	rcall	.-234    	; 0x43e <UART0_putchar>
			i--;
 528:	f7 01       	movw	r30, r14
 52a:	10 82       	st	Z, r1
		if( (c==8) && (i>0) )		//validacion backspace
		{
			UART0_putchar('\b');
			UART0_putchar(' ');
			UART0_putchar(8);
			*str--='\0';
 52c:	01 50       	subi	r16, 0x01	; 1
 52e:	11 09       	sbc	r17, r1
 530:	c7 01       	movw	r24, r14
 532:	01 97       	sbiw	r24, 0x01	; 1
			i--;
		}
	}while(c != 13);
 534:	7c 01       	movw	r14, r24
 536:	db cf       	rjmp	.-74     	; 0x4ee <UART0_gets+0x10>
	*str = '\0';
 538:	8d 30       	cpi	r24, 0x0D	; 13
 53a:	c9 f6       	brne	.-78     	; 0x4ee <UART0_gets+0x10>
}
 53c:	f7 01       	movw	r30, r14
 53e:	10 82       	st	Z, r1
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	08 95       	ret

0000054c <UART0_puts>:
	{
		transmision.buffer[transmision.in_idx++] = data;  /*ingresa el dato en la cabeza y aumenta*/
	}
}
void UART0_puts(char *str)
{
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	ec 01       	movw	r28, r24
	while(*str)
 552:	88 81       	ld	r24, Y
 554:	88 23       	and	r24, r24
 556:	29 f0       	breq	.+10     	; 0x562 <UART0_puts+0x16>
		UART0_putchar(*str++);
 558:	21 96       	adiw	r28, 0x01	; 1
		transmision.buffer[transmision.in_idx++] = data;  /*ingresa el dato en la cabeza y aumenta*/
	}
}
void UART0_puts(char *str)
{
	while(*str)
 55a:	71 df       	rcall	.-286    	; 0x43e <UART0_putchar>
 55c:	89 91       	ld	r24, Y+
 55e:	81 11       	cpse	r24, r1
		UART0_putchar(*str++);
 560:	fc cf       	rjmp	.-8      	; 0x55a <UART0_puts+0xe>
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <main>:

ring_buffer_t transmision;
ring_buffer_t recepcion;

int main( void )
{
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	cd b7       	in	r28, 0x3d	; 61
 56e:	de b7       	in	r29, 0x3e	; 62
 570:	64 97       	sbiw	r28, 0x14	; 20
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	f8 94       	cli
 576:	de bf       	out	0x3e, r29	; 62
 578:	0f be       	out	0x3f, r0	; 63
 57a:	cd bf       	out	0x3d, r28	; 61
	
	char cad[20];
	uint16_t num;
	UART0_Ini(0);
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	90 e0       	ldi	r25, 0x00	; 0
	while(1)
	{
		UART0_getchar();
 580:	43 df       	rcall	.-378    	; 0x408 <UART0_Ini>
		UART0_puts("\n\rIntroduce un nÃºmero:\n\r");
 582:	d0 dd       	rcall	.-1120   	; 0x124 <UART0_getchar>
 584:	80 e0       	ldi	r24, 0x00	; 0
		UART0_gets(cad);
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	e1 df       	rcall	.-62     	; 0x54c <UART0_puts>
 58a:	ce 01       	movw	r24, r28
		num = atoi(cad);
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	a7 df       	rcall	.-178    	; 0x4de <UART0_gets>
 590:	ce 01       	movw	r24, r28
 592:	01 96       	adiw	r24, 0x01	; 1
		itoa(cad,num,2);
 594:	a6 de       	rcall	.-692    	; 0x2e2 <atoi>
 596:	8c 01       	movw	r16, r24
 598:	42 e0       	ldi	r20, 0x02	; 2
 59a:	bc 01       	movw	r22, r24
		UART0_puts("\n\rBin:");
 59c:	ce 01       	movw	r24, r28
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	f6 de       	rcall	.-532    	; 0x38e <itoa>
		UART0_puts(cad);
 5a2:	8a e1       	ldi	r24, 0x1A	; 26
 5a4:	92 e0       	ldi	r25, 0x02	; 2
		itoa(cad,num,16);
 5a6:	d2 df       	rcall	.-92     	; 0x54c <UART0_puts>
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	cf df       	rcall	.-98     	; 0x54c <UART0_puts>
 5ae:	40 e1       	ldi	r20, 0x10	; 16
		UART0_puts("\n\rHEx:");
 5b0:	b8 01       	movw	r22, r16
 5b2:	ce 01       	movw	r24, r28
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	eb de       	rcall	.-554    	; 0x38e <itoa>
		UART0_puts(cad);
 5b8:	81 e2       	ldi	r24, 0x21	; 33
 5ba:	92 e0       	ldi	r25, 0x02	; 2
 5bc:	c7 df       	rcall	.-114    	; 0x54c <UART0_puts>
 5be:	ce 01       	movw	r24, r28
 5c0:	01 96       	adiw	r24, 0x01	; 1
 5c2:	c4 df       	rcall	.-120    	; 0x54c <UART0_puts>
 5c4:	de cf       	rjmp	.-68     	; 0x582 <main+0x1a>

000005c6 <__udivmodhi4>:
 5c6:	aa 1b       	sub	r26, r26
 5c8:	bb 1b       	sub	r27, r27
 5ca:	51 e1       	ldi	r21, 0x11	; 17
 5cc:	07 c0       	rjmp	.+14     	; 0x5dc <__udivmodhi4_ep>

000005ce <__udivmodhi4_loop>:
 5ce:	aa 1f       	adc	r26, r26
 5d0:	bb 1f       	adc	r27, r27
 5d2:	a6 17       	cp	r26, r22
 5d4:	b7 07       	cpc	r27, r23
 5d6:	10 f0       	brcs	.+4      	; 0x5dc <__udivmodhi4_ep>
 5d8:	a6 1b       	sub	r26, r22
 5da:	b7 0b       	sbc	r27, r23

000005dc <__udivmodhi4_ep>:
 5dc:	88 1f       	adc	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	5a 95       	dec	r21
 5e2:	a9 f7       	brne	.-22     	; 0x5ce <__udivmodhi4_loop>
 5e4:	80 95       	com	r24
 5e6:	90 95       	com	r25
 5e8:	bc 01       	movw	r22, r24
 5ea:	cd 01       	movw	r24, r26
 5ec:	08 95       	ret

000005ee <_exit>:
 5ee:	f8 94       	cli

000005f0 <__stop_program>:
 5f0:	ff cf       	rjmp	.-2      	; 0x5f0 <__stop_program>
